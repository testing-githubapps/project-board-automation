name: Github Project Board Assignment
on:
  workflow_dispatch:
  issues:
    types:
      - labeled
jobs:
  #publish-to-project:
  #  runs-on: ubuntu-latest
  #  steps:
  #  - uses: actions/add-to-project@v0.4.0
  #    with:
  #        project-url: ${{ secrets.PROJECTS_BOARD_URL }}
  #        github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  #       labeled: wontfix, invalid, duplicate
  #        label-operator: NOT

  set-custom-field:
   # needs: publish-to-project
    runs-on: ubuntu-latest
    steps:
    - name: Grabbing Project Data
      env: 
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        ORGANIZATION: testing-githubapps
        PROJECT_NUMBER: 1
        CLIENT_NAME: ${{ secrets.CLIENT_NAME }}
      run: |
        gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

          cat project_data.json
          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'CLIENT_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Client") | .id' project_data.json) >> $GITHUB_ENV
          echo 'CLIENT_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Client") | .options[] | select(.name==$CLIENT_NAME) |.id' project_data.json) >> $GITHUB_ENV
    
    - name: Add PR to project
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        ISSUE_ID: ${{ github.event.issue.node_id }}
      run: |
        item_id="$( gh api graphql -f query='
          mutation($project:ID!, $issue:ID!) {
            addProjectV2ItemById(input: {projectId: $project, contentId: $issue}) {
              item {
                id
              }
            }
          }' -f project=$PROJECT_ID -f issue=$ISSUE_ID --jq '.data.addProjectV2ItemById.item.id')"
    
          echo 'ITEM_ID='$item_id >> $GITHUB_ENV

    - name: Set Client Field
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      run: |
        gh api graphql -f query='
          mutation (
            $project: ID!
            $item: ID!
            $client_field: ID!
            $client_value: String!
          ) {
            set_client: updateProjectV2ItemFieldValue(input: {
              projectId: $project
              itemId: $item
              fieldId: $client_field
              value: { 
                singleSelectOptionId: $client_value
                }
            }) {
              projectV2Item {
                id
                }
            }
          }' -f project=$PROJECT_ID -f item=$ITEM_ID -f client_field=$CLIENT_FIELD_ID -f client_value=${{ env.CLIENT_OPTION_ID }} --silent